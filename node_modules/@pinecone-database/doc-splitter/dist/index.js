"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkdownTextSplitter = exports.RecursiveCharacterTextSplitter = exports.SupportedTextSplitterLanguages = exports.TextSplitter = exports.Document = void 0;
var Document = /** @class */ (function () {
    function Document(fields) {
        this.pageContent = fields.pageContent || "";
        this.metadata = fields.metadata || {};
    }
    return Document;
}());
exports.Document = Document;
var TextSplitter = /** @class */ (function () {
    function TextSplitter(fields) {
        var _a, _b;
        this.chunkSize = 1000;
        this.chunkOverlap = 200;
        this.chunkSize = (_a = fields === null || fields === void 0 ? void 0 : fields.chunkSize) !== null && _a !== void 0 ? _a : this.chunkSize;
        this.chunkOverlap = (_b = fields === null || fields === void 0 ? void 0 : fields.chunkOverlap) !== null && _b !== void 0 ? _b : this.chunkOverlap;
        if (this.chunkOverlap >= this.chunkSize) {
            throw new Error("Cannot have chunkOverlap >= chunkSize");
        }
    }
    TextSplitter.prototype.getNewLinesCount = function (text) {
        return (text.match(/\n/g) || []).length;
    };
    TextSplitter.prototype.getLoc = function (metadata, from, to) {
        var loc = metadata.loc && typeof metadata.loc === "object"
            ? __assign({}, metadata.loc) : {};
        return __assign(__assign({}, metadata), { loc: __assign(__assign({}, loc), { lines: { from: from, to: to } }) });
    };
    TextSplitter.prototype.getIntermediateNewLines = function (text, prevChunk, chunk) {
        if (!prevChunk)
            return 0;
        var indexChunk = text.indexOf(chunk);
        var indexEndPrevChunk = text.indexOf(prevChunk) + prevChunk.length;
        var removedNewlinesFromSplittingText = text.slice(indexEndPrevChunk, indexChunk);
        return this.getNewLinesCount(removedNewlinesFromSplittingText);
    };
    TextSplitter.prototype.createDocumentsFromText = function (text, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var lineCounterIndex, prevChunk, documents, _i, _a, chunk, intermediateNewLines, newLinesCount, updatedMetadata;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        lineCounterIndex = 1;
                        prevChunk = null;
                        documents = [];
                        _i = 0;
                        return [4 /*yield*/, this.splitText(text)];
                    case 1:
                        _a = _b.sent();
                        _b.label = 2;
                    case 2:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        chunk = _a[_i];
                        intermediateNewLines = this.getIntermediateNewLines(text, prevChunk, chunk);
                        lineCounterIndex += intermediateNewLines;
                        newLinesCount = this.getNewLinesCount(chunk);
                        updatedMetadata = this.getLoc(metadata, lineCounterIndex, lineCounterIndex + newLinesCount);
                        documents.push(new Document({ pageContent: chunk, metadata: updatedMetadata }));
                        lineCounterIndex += newLinesCount;
                        prevChunk = chunk;
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 2];
                    case 4: return [2 /*return*/, documents];
                }
            });
        });
    };
    TextSplitter.prototype.createDocuments = function (texts, metadatas) {
        if (metadatas === void 0) { metadatas = []; }
        return __awaiter(this, void 0, void 0, function () {
            var documentPromises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        metadatas = metadatas.length > 0 ? metadatas : new Array(texts.length).fill({});
                        documentPromises = texts.map(function (text, i) { return _this.createDocumentsFromText(text, metadatas[i]); });
                        return [4 /*yield*/, Promise.all(documentPromises)];
                    case 1: return [2 /*return*/, (_a.sent()).flat()];
                }
            });
        });
    };
    TextSplitter.prototype.splitDocuments = function (documents) {
        return __awaiter(this, void 0, void 0, function () {
            var selectedDocuments, texts, metadatas;
            return __generator(this, function (_a) {
                selectedDocuments = documents.filter(function (doc) { return doc.pageContent !== undefined; });
                texts = selectedDocuments.map(function (doc) { return doc.pageContent; });
                metadatas = selectedDocuments.map(function (doc) { return doc.metadata; });
                return [2 /*return*/, this.createDocuments(texts, metadatas)];
            });
        });
    };
    TextSplitter.prototype.joinDocs = function (docs, separator) {
        var text = docs.join(separator).trim();
        return text === "" ? null : text;
    };
    TextSplitter.prototype.warnForExcessChunkSize = function (total) {
        if (total > this.chunkSize) {
            console.warn("Created a chunk of size ".concat(total, ", which is longer than the specified ").concat(this.chunkSize));
        }
    };
    TextSplitter.prototype.createDocAndAdjustCurrentDoc = function (currentDoc, separator, total, len) {
        var doc = this.joinDocs(currentDoc, separator);
        while (total > this.chunkOverlap || (total + len > this.chunkSize && total > 0)) {
            total -= currentDoc[0].length;
            currentDoc.shift();
        }
        return doc;
    };
    TextSplitter.prototype.mergeSplits = function (splits, separator) {
        var docs = [];
        var currentDoc = [];
        var total = 0;
        for (var _i = 0, splits_1 = splits; _i < splits_1.length; _i++) {
            var d = splits_1[_i];
            var len = d.length;
            if (total + len >= this.chunkSize) {
                this.warnForExcessChunkSize(total);
                if (currentDoc.length > 0) {
                    var doc_1 = this.createDocAndAdjustCurrentDoc(currentDoc, separator, total, len);
                    if (doc_1 !== null) {
                        docs.push(doc_1);
                    }
                }
            }
            currentDoc.push(d);
            total += len;
        }
        var doc = this.joinDocs(currentDoc, separator);
        if (doc !== null) {
            docs.push(doc);
        }
        return docs;
    };
    return TextSplitter;
}());
exports.TextSplitter = TextSplitter;
exports.SupportedTextSplitterLanguages = [
    "markdown",
    "latex",
    "html",
];
var RecursiveCharacterTextSplitter = /** @class */ (function (_super) {
    __extends(RecursiveCharacterTextSplitter, _super);
    function RecursiveCharacterTextSplitter(fields) {
        var _this = this;
        var _a;
        _this = _super.call(this, fields) || this;
        _this.separators = ["\n\n", "\n", " ", ""];
        _this.separators = (_a = fields === null || fields === void 0 ? void 0 : fields.separators) !== null && _a !== void 0 ? _a : _this.separators;
        return _this;
    }
    RecursiveCharacterTextSplitter.prototype.splitText = function (text) {
        return __awaiter(this, void 0, void 0, function () {
            var finalChunks, separator, _i, _a, s, splits, goodSplits, _b, splits_2, s, mergedText, otherInfo, mergedText;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        finalChunks = [];
                        separator = this.separators[this.separators.length - 1];
                        for (_i = 0, _a = this.separators; _i < _a.length; _i++) {
                            s = _a[_i];
                            if (s === "") {
                                separator = s;
                                break;
                            }
                            if (text.includes(s)) {
                                separator = s;
                                break;
                            }
                        }
                        if (separator) {
                            splits = text.split(separator);
                        }
                        else {
                            splits = text.split("");
                        }
                        goodSplits = [];
                        _b = 0, splits_2 = splits;
                        _c.label = 1;
                    case 1:
                        if (!(_b < splits_2.length)) return [3 /*break*/, 5];
                        s = splits_2[_b];
                        if (!(s.length < this.chunkSize)) return [3 /*break*/, 2];
                        goodSplits.push(s);
                        return [3 /*break*/, 4];
                    case 2:
                        if (goodSplits.length) {
                            mergedText = this.mergeSplits(goodSplits, separator);
                            finalChunks.push.apply(finalChunks, mergedText);
                            goodSplits = [];
                        }
                        return [4 /*yield*/, this.splitText(s)];
                    case 3:
                        otherInfo = _c.sent();
                        finalChunks.push.apply(finalChunks, otherInfo);
                        _c.label = 4;
                    case 4:
                        _b++;
                        return [3 /*break*/, 1];
                    case 5:
                        if (goodSplits.length) {
                            mergedText = this.mergeSplits(goodSplits, separator);
                            finalChunks.push.apply(finalChunks, mergedText);
                        }
                        return [2 /*return*/, finalChunks];
                }
            });
        });
    };
    RecursiveCharacterTextSplitter.prototype.mergeSplits = function (splits, separator) {
        var mergedText = [];
        var currentChunk = "";
        for (var _i = 0, splits_3 = splits; _i < splits_3.length; _i++) {
            var s = splits_3[_i];
            if (currentChunk.length + s.length < this.chunkSize) {
                currentChunk += s + separator;
            }
            else {
                mergedText.push(currentChunk.trim());
                currentChunk = s + separator;
            }
        }
        if (currentChunk) {
            mergedText.push(currentChunk.trim());
        }
        return mergedText;
    };
    RecursiveCharacterTextSplitter.getSeparatorsForLanguage = function (language) {
        if (language === "markdown") {
            return [
                // First, try to split along Markdown headings (starting with level 2)
                "\n## ",
                "\n### ",
                "\n#### ",
                "\n##### ",
                "\n###### ",
                // Note the alternative syntax for headings (below) is not handled here
                // Heading level 2
                // ---------------
                // End of code block
                "```\n\n",
                // Horizontal lines
                "\n\n***\n\n",
                "\n\n---\n\n",
                "\n\n___\n\n",
                // Note that this splitter doesn't handle horizontal lines defined
                // by *three or more* of ***, ---, or ___, but this is not handled
                "\n\n",
                "\n",
                " ",
                "",
            ];
        }
        else if (language === "latex") {
            return [
                // First, try to split along Latex sections
                "\n\\chapter{",
                "\n\\section{",
                "\n\\subsection{",
                "\n\\subsubsection{",
                // Now split by environments
                "\n\\begin{enumerate}",
                "\n\\begin{itemize}",
                "\n\\begin{description}",
                "\n\\begin{list}",
                "\n\\begin{quote}",
                "\n\\begin{quotation}",
                "\n\\begin{verse}",
                "\n\\begin{verbatim}",
                // Now split by math environments
                "\n\\begin{align}",
                "$$",
                "$",
                // Now split by the normal type of lines
                "\n\n",
                "\n",
                " ",
                "",
            ];
        }
        else if (language === "html") {
            return [
                // First, try to split along HTML tags
                "<body>",
                "<div>",
                "<p>",
                "<br>",
                "<li>",
                "<h1>",
                "<h2>",
                "<h3>",
                "<h4>",
                "<h5>",
                "<h6>",
                "<span>",
                "<table>",
                "<tr>",
                "<td>",
                "<th>",
                "<ul>",
                "<ol>",
                "<header>",
                "<footer>",
                "<nav>",
                // Head
                "<head>",
                "<style>",
                "<script>",
                "<meta>",
                "<title>",
                // Normal type of lines
                " ",
                "",
            ];
        }
        else {
            throw new Error("Language ".concat(language, " is not supported."));
        }
    };
    return RecursiveCharacterTextSplitter;
}(TextSplitter));
exports.RecursiveCharacterTextSplitter = RecursiveCharacterTextSplitter;
var MarkdownTextSplitter = /** @class */ (function (_super) {
    __extends(MarkdownTextSplitter, _super);
    function MarkdownTextSplitter(fields) {
        return _super.call(this, __assign(__assign({}, fields), { separators: RecursiveCharacterTextSplitter.getSeparatorsForLanguage("markdown") })) || this;
    }
    return MarkdownTextSplitter;
}(RecursiveCharacterTextSplitter));
exports.MarkdownTextSplitter = MarkdownTextSplitter;
//# sourceMappingURL=index.js.map